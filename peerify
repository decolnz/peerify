#!/usr/bin/perl

use DBI;
use warnings;
use Carp;
use Net::Netconf::Manager;
use JSON qw( decode_json );


# query execution status constants
use constant REPORT_SUCCESS => 1;
use constant REPORT_FAILURE => 0;
use constant STATE_CONNECTED => 1;
use constant STATE_LOCKED => 2;
use constant STATE_CONFIG_LOADED => 3;


## TODO: Implement a JSON file for config statements below
## Database Setup
$database="";
$host="";
$port=3306;
$user="";
$pass="";

## Local variables setup
## TODO: Use GetOps for these. 
$my_asn = shift;
$peer_asn = shift;

## NETCONF details 
$access="ssh";
$login="";
$keyfile="";

# JSON ixp peering-address to hostname mapping
$ixp_to_router_mapping="router.json";

if ( !defined($peer_asn) || !defined($my_asn)) { print "usage: ./peerify <my asn> <peer asn>\n"; exit 1 ; }   

$dbh = DBI->connect("dbi:mysql:database=$database;host=$host;port=$port", $user , $pass ) || die "Could not connect to database: $DBI::errstr";

## Lookup the Participant ID to use as foreign key elsewhere.
$sth = $dbh->prepare("select id,asn,name from peerParticipants where asn = $peer_asn");
$sth->execute();
$result = $sth->fetchrow_hashref();
$peer_id=$result->{id};
$peer_name=$result->{name};

## Get my local ID for looking up our local-address later on 
$sth = $dbh->prepare("select id from peerParticipants where asn = $my_asn");
$sth->execute();
$result = $sth->fetchrow_hashref();
$my_id=$result->{id};

print "Found: $peer_name (AS $peer_asn, id=$peer_id)\n";

## Try get Technical contact details. 
## TODO: Attempt to match noc in the pattern and use that, otherwise search for multiple tech-contacts. 

$sth = $dbh->prepare("select * From peerParticipantsContacts where participant_id=${peer_id} and role=\"Technical\" ");
$sth->execute();
@result = $sth->fetchrow_array;
if ( defined ( $result[5] ) ) { $peer_email=$result[5]; } else { $peer_email="NO_CONTACT";}
if ( defined ( $result[4] ) ) { $peer_phone=$result[4]; } else { $peer_phone="NO_CONTACT";}


## Now is a good time to have a JSON object so we can lookup the local-address to hostname mappings
$lookup=get_router_names($ixp_to_router_mapping);


## Use ID to lookup which locations they are in.
$sth = $dbh->prepare("select public_id,local_asn,local_ipaddr from peerParticipantsPublics  where participant_id=${peer_id}");
$sth->execute();

while ( @peer_id = $sth->fetchrow_array ) {
	$ixp_id=$peer_id[0];
	$peer_asn=$peer_id[1];
	$peer_ip=$peer_id[2];

## Get the IXP name, which we'll use to set the peer group. 
	$ixp_qry = $dbh->prepare("select id,name,city  from mgmtPublics where id=$ixp_id");
	$ixp_qry->execute();
	while ( @ixp = $ixp_qry->fetchrow_array ) {
		@results=split(" ", $ixp[1]) ;
		$ixp_name = $results[0];
		$ixp_name =~ s/-//g;
		$ixp_name =~ tr/[a-z]/[A-Z/;
		$ixp_city = $ixp[2];
	}

## We should lookup our local-address 
	$local_addr_qry = $dbh->prepare("select local_ipaddr from peerParticipantsPublics  where participant_id=$my_id and public_id=$ixp_id");
	$local_addr_qry->execute();
	while ( @addr = $local_addr_qry->fetchrow_array ) {
## PeeringDB - why is everything IPv4?!?!?!!?
		$addr = $addr[0];
		if ( $addr =~ /\:/ ) { $local_addr_v6 = $addr; } 
		if ( $addr =~ /\./ ) { $local_addr_v4 = $addr; }
	}
## Hack - if link-local does not exist, then we dont have a common IXP. Skip to next. 
	if ( !defined ( $local_addr_v6 ) && !defined ($local_addr_v4) ) { next; } 
	print "Generating Config for IXP $ixp_name in $ixp_city \n";

	if ( $peer_ip  =~ /\:/ ) { $ixp_name .= "_V6"; $local_addr = $local_addr_v6;}
	if ( $peer_ip  =~ /\./ ) { $local_addr = $local_addr_v4; }
	$hostname = $lookup->{$local_addr};

## TODO: Probably a better way of doing this as it's god-awful ugly. 
	$peer_xml = get_netconf_template( $ixp_name, $peer_ip, $peer_name, $peer_phone, $peer_email, $local_addr, $peer_asn ) ;

	print $peer_xml;
	print "Pushing config to $hostname\n";
	push_conf($peer_xml, $hostname );
	$local_addr_v4=undef;
	$local_addr_v6=undef;

}

$dbh->disconnect();
exit 0;

#################################################################
# get_netconf_template
#
# Description
#  Return netconf/XML envelope with peer configured. 
#################################################################

sub get_netconf_template {

	my $ixp_name = shift;
	my $peer_ip = shift;
	my $peer_name = shift; 
	my $peer_phone = shift;
	my $peer_email = shift; 
	my $local_addr = shift; 
	my $peer_asn = shift; 

	my $router_netconf_xml = <<END_MESSAGE;
<configuration>
 <protocols>
  <bgp>
   <group>
    <name>$ixp_name</name>
     <neighbor>
     <name>$peer_ip</name>
     <description>\"$peer_name: $peer_phone $peer_email\"</description>
     <local-address>$local_addr</local-address>
     <peer-as>$peer_asn</peer-as>
    </neighbor>
   </group>
  </bgp>
 </protocols>
</configuration>
END_MESSAGE

	return $router_netconf_xml;

}

#################################################################
# get_router_name
#
# Description:
#  Read in a JSON mapping of IXP address to router-hostname, 
#  return the decoded JSON object 
#################################################################

sub get_router_names { 
	my $json_file = shift || croak 'Cant Find the JSON file'; 
	open FH,"<$json_file"; 
	while (<FH>) { 
		$json_text .= $_ ; 
	}
	print $json_text;
	$json_data = decode_json( $json_text );
	return $json_data; 

}

#################################################################
# graceful_shutdown
#
# Description:
#   We can be in one of the three states: 
#     STATE_CONNECTED, STATE_LOCKED, STATE_CONFIG_LOADED
#   Take actions depending on the current state
#################################################################
sub graceful_shutdown
{
	my ($jnx, $state, $success) = @_;
	if ($state >= STATE_CONFIG_LOADED) {
# We have already done an <edit-config> operation
# - Discard the changes
		print "Discarding the changes made ...\n";
		$jnx->discard_changes();
		if ($jnx->has_error) {
			print "Unable to discard <edit-config> changes\n";
		}
	}

	if ($state >= STATE_LOCKED) {
# Unlock the configuration database
		$jnx->unlock_config();
		if ($jnx->has_error) {
			print "Unable to unlock the candidate configuration\n";
		}
	}

	if ($state >= STATE_CONNECTED) {
# Disconnect from the Netconf server
		$jnx->disconnect();
	}

	if ($success) {
		print "REQUEST succeeded !!\n";
	} else {
		print "REQUEST failed !!\n";
	}

}


################################################################
# get_error_info
#
# Description:
#   Print the error information
################################################################
sub get_error_info
{
	my %error = @_;

	print "\nERROR: Printing the server request error ...\n";

# Print 'error-severity' if present
	if ($error{'error_severity'}) {
		print "ERROR SEVERITY: $error{'error_severity'}\n";
	}
# Print 'error-message' if present
	if ($error{'error_message'}) {
		print "ERROR MESSAGE: $error{'error_message'}\n";
	}

# Print 'bad-element' if present
	if ($error{'bad_element'}) {
		print "BAD ELEMENT: $error{'bad_element'}\n\n";
	}
}

################################################################
# push_conf 
#
# Description:
#    take a netconf string, validate it and pass it to the specified host
################################################################

sub push_conf { 
# Set AUTOFLUSH to true
$| = 1;

# Retrieve command line arguments for the XML file name
my $xml_string = shift || croak "XML not passed to push_conf function";

# Get the hostname
my $hostname = shift || croak "hostname not passed to push_conf function";

use constant VALID_ACCESS_METHOD => 'ssh';

# Now create the device information to send to Net::Netconf::Manager
my %deviceinfo = ( 
	'access' => $access,
	'login' => $login,
	'keyfile' => $keyfile,
	'hostname' => $hostname,
);

my $res; # Netconf server response

# connect to the Netconf server
my $jnx = new Net::Netconf::Manager(%deviceinfo);
unless (ref $jnx) {
	croak "ERROR: $deviceinfo{hostname}: failed to connect.\n";
}

# Lock the configuration database before making any changes
print "Locking configuration database ...\n";
my %queryargs = ( 'target' => 'candidate' );
$res = $jnx->lock_config(%queryargs);
# See if you got an error
if ($jnx->has_error) {
	print "ERROR: in processing request \n $jnx->{'request'} \n";
	graceful_shutdown($jnx, STATE_CONNECTED, REPORT_FAILURE);
}

# Read in the XML file
my $config = $xml_string;
print "\n\n$config \n\n";

%queryargs = ( 
	'target' => 'candidate'
     );

# Only interested in being in config mode here. Not passing raw config.
$queryargs{'config'} = $config;

$res = $jnx->edit_config(%queryargs);

# See if you got an error
if ($jnx->has_error) {
	print "ERROR: in processing request \n $jnx->{'request'} \n";
# Get the error
	my $error = $jnx->get_first_error();
	get_error_info(%$error);
# Disconnect
	graceful_shutdown($jnx, STATE_LOCKED, REPORT_FAILURE);
}

# Commit the changes
print "Committing the <edit-config> changes ...\n";
$jnx->commit();
if ($jnx->has_error) {
	print "ERROR: Failed to commit the configuration.\n";
	graceful_shutdown($jnx, STATE_CONFIG_LOADED, REPORT_FAILURE);
}

# Unlock the configuration database and 
# disconnect from the Netconf server
print "Disconnecting from the Netconf server ...\n";
graceful_shutdown($jnx, STATE_LOCKED, REPORT_SUCCESS);

}

